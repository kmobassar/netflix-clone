{"version":3,"sources":["request.js","axios.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","request","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","requests","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","clas","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5c004e53.chunk.js","sourcesContent":["\nconst API_KEY=\"61632da7adaf3916bd7358e5bfdd0453\";\n\nconst request={\n    fetchTrending: `trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\nexport default request;","import axios from 'axios';\n\nconst instance  =  axios.create({\n    baseURL:\"https://api.themoviedb.org/3\",\n});\nexport default instance;","import React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\nfunction Row({title,fetchUrl,isLargeRow}){\n    const [movies,setMovies]=useState([]);\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\n\n    useEffect(()=>{\n\n        async function fetchData(){\n            const requests=await axios.get(fetchUrl);\n            setMovies(requests.data.results);\n            return requests;\n        }\n        fetchData();\n    },[fetchUrl]);\n\n    const opts = {\n        height:\"390\",\n        width:\"100%\",\n        playerVars:{\n\n            autoplay:1,\n\n        },\n    };\n    const handleClick=(movie)=>{\n        if (trailerUrl){\n            setTrailerUrl('');\n        }\n        else{\n            movieTrailer(movie?.name || \"\")\n            .then((url)=>{\n                const urlParams=new URLSearchParams(new URL(url).search);\n               setTrailerUrl( urlParams.get(\"v\"));\n            })\n            .catch((error) => console.log(error));\n        }\n\n    };\n\n    \n\n\n    return(\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\" >\n                {movies.map((movie) => (\n                    <img \n                    key={movie.id}\n\n                    onClick = { () => handleClick(movie) }\n\n                    className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                   src={`${base_url}${isLargeRow?movie.poster_path:movie.backdrop_path}`}\n                     alt={movie.name}\n                     />\n\n                ))}\n                \n                   \n                \n\n            </div>\n               {  trailerUrl &&<YouTube videoId={trailerUrl} opts={opts}/>  }\n        </div>\n    );\n}\nexport default Row;","import React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport request from './request';\nimport './Banner.css';\nfunction Banner(){\n    const [movies,setMovies]=useState([]);\n\n    useEffect(()=>{\n        async function fetchData(){\n\n            const requests= await axios.get(request.fetchNetflixOriginals);\n           \n            setMovies(requests.data.results[\n            Math.floor(Math.random()*requests.data.results.length-1)\n                        ]            );\n                        return requests;\n        }\n        fetchData();\n    },[]);\n    console.log(movies);\n    function truncate(str,n){\n        return str?.length>n ?str.substr(0,n-1) +\"...\":str;\n    }\n    \n    return(\n       <header className=\"banner\" \n       style={{\n       backgroundSize:\"cover\",\n       backgroundImage:`url(\n           \"https://image.tmdb.org/t/p/original/${movies?.backdrop_path}\"\n           )`,\n           backgroundPosition:\"center center\",\n       }}\n       >\n           <div className=\"banner_contents\">\n\n               <h1 className=\"banner_title\">\n                   {movies?.title || movies?.name ||movies?.original_name}\n               </h1>\n               <div clas=\"banner_buttons\">\n                   <button className=\"banner_button\">Play</button>\n                   <button className=\"banner_button\">My List</button>\n               </div>\n    <h2 className=\"banner_description\"> {truncate(movies?.overview,150)}</h2>\n               \n               </div>\n     <div className=\"banner--fadebutton\"/>\n\n       </header>\n\n    );\n}\nexport default Banner;","import React, { useEffect, useState } from 'react';\nimport './Nav.css';\nfunction Nav(){\n    const[show,handleShow]=useState(false);\n\n  useEffect(()=>{\n     \n\n    window.addEventListener('scroll',()=>{\n        if(window.scrollY>100){\n            handleShow(true);\n        }else handleShow(false);\n    })\n    return () =>\n    {\n        window.removeEventListener('scroll')\n    };\n  },[] );\n\n\n    return(\n        <div className={`nav  ${show && \"nav_black\"}`}>\n            <img\n            className=\"nav_logo\"\n            src=\"https://image.flaticon.com/icons/png/512/870/870910.png\" alt=\"netflix-logo\"/>\n\n        </div>\n    );\n}\nexport default Nav;","import React from 'react';\nimport request from './request';\n\nimport './App.css';\nimport Row from './Row';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Nav/>\n    <Banner/>\n     <Row title=\"NETFLIX ORIGINALS\" fetchUrl={request.fetchNetflixOriginals} isLargeRow/>\n     <Row title=\"Trending Now\" fetchUrl={request.fetchTrending}/>\n     <Row title=\"Top Rated\" fetchUrl={request.fetchTopRated}/>\n     <Row title=\"Action Movies\" fetchUrl={request.fetchActionMovies}/>\n     <Row title=\"Comedy Movies\" fetchUrl={request.fetchComedyMovies}/>\n     <Row title=\"Horror Movies\" fetchUrl={request.fetchHorrorMovies}/>\n     <Row title=\"Romance Movies\" fetchUrl={request.fetchRomanceMovies}/>\n     <Row title=\"Documentaries\" fetchUrl={request.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}